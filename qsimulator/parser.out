Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    CONCAT
    MEASURE
    TENSOR

Grammar

Rule 0     S' -> op_initialize
Rule 1     op_initialize -> INITIALIZE REGISTER
Rule 2     op_initialize -> INITIALIZE REGISTER BITSTRING
Rule 3     op_select -> SELECT VARIABLE REGISTER DIGIT DIGIT
Rule 4     op_apply -> APPLY matrix REGISTER
Rule 5     matrix -> gate
Rule 6     matrix -> VARIABLE
Rule 7     gate -> CNOT
Rule 8     gate -> H
Rule 9     gate -> identity
Rule 10    identity -> IMATRIX
Rule 11    whatever -> CNOT

Terminals, with rules where they appear

APPLY                : 4
BITSTRING            : 2
CNOT                 : 7 11
CONCAT               : 
DIGIT                : 3 3
H                    : 8
IMATRIX              : 10
INITIALIZE           : 1 2
MEASURE              : 
REGISTER             : 1 2 3 4
SELECT               : 3
TENSOR               : 
VARIABLE             : 3 6
error                : 

Nonterminals, with rules where they appear

gate                 : 5
identity             : 9
matrix               : 4
op_apply             : 
op_initialize        : 0
op_select            : 
whatever             : 

Parsing method: LALR

state 0

    (0) S' -> . op_initialize
    (1) op_initialize -> . INITIALIZE REGISTER
    (2) op_initialize -> . INITIALIZE REGISTER BITSTRING

    INITIALIZE      shift and go to state 1

    op_initialize                  shift and go to state 2

state 1

    (1) op_initialize -> INITIALIZE . REGISTER
    (2) op_initialize -> INITIALIZE . REGISTER BITSTRING

    REGISTER        shift and go to state 3


state 2

    (0) S' -> op_initialize .



state 3

    (1) op_initialize -> INITIALIZE REGISTER .
    (2) op_initialize -> INITIALIZE REGISTER . BITSTRING

    $end            reduce using rule 1 (op_initialize -> INITIALIZE REGISTER .)
    BITSTRING       shift and go to state 4


state 4

    (2) op_initialize -> INITIALIZE REGISTER BITSTRING .

    $end            reduce using rule 2 (op_initialize -> INITIALIZE REGISTER BITSTRING .)

